<launch>
    <arg name="model" default="burger" doc="model type [burger, waffle]" />
    <arg name="x0" />
    <arg name="y0" />
    <arg name="x1" default="0"/>
    <arg name="y1" default="0"/>
    <arg name="x2" default="0"/>
    <arg name="y2" default="0"/>
    <arg name="z" default="0"/>
    <arg name="r_id"/>
    <arg name="r_ns" default="robot"/> <!-- base namespace without robot number, must be the same for all -->
    <arg name="r_count" />

    <arg name="this_x" value="$(eval arg('x'+str(arg('r_id'))))"/>
    <arg name="this_y" value="$(eval arg('y'+str(arg('r_id'))))"/>

    <group ns="$(arg r_ns)$(arg r_id)">
        <param name="tf_prefix" value="$(arg r_ns)$(arg r_id)" />

        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.no_odom.xacro" />

        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-x $(arg this_x) -y $(arg this_y) -z $(arg z) -urdf -model $(arg r_ns)$(arg r_id)_$(arg model) -param robot_description"/>
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="50.0" />
        </node>

        <node pkg="move_base" type="move_base" respawn="false" name="move_base">
            <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
            <rosparam file="$(find mrslam_sim)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find mrslam_sim)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find mrslam_sim)/param/local_costmap_params.yaml" command="load" />
            <rosparam file="$(find mrslam_sim)/param/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find mrslam_sim)/param/move_base_params.yaml" command="load" />
            <rosparam file="$(find mrslam_sim)/param/dwa_local_planner_params.yaml" command="load" />
            <!--<remap from="map" to="map_merged"/>-->
        </node>

        <!--tf_prefix fix for rviz-->
        <node pkg="tf" type="static_transform_publisher" name="map_to_rviz" args="0 0 0 0 0 0 world $(arg r_ns)$(arg r_id)/map 1" />


        <node pkg="range_ctrl" type="range_ctrl_laser_scan" name="range_ctrl_laser_scan" output="screen">
            <param name="input_topics" value="scan_collector_r$(arg r_id)" />
            <param name="output_topics" value="scan_r$(arg r_id)" />
            <param name="r_count" value="$(arg r_count)" />
            <param name="r_id" value="$(arg r_id)" />
            <param name="range" value="5" />
            <param name="base_ns" value="$(arg r_ns)" />
            <param name="retrans_own_topics" value="true" />
        </node>

        <node pkg="msg_collector" type="msg_collector_laser_scan" name="msg_collector_laser_scan" output="screen">
            <param name="input_topics" value="scan" />
            <param name="output_topics" value="scan_collector_r" />
            <param name="min_msg_interval" value="0.1" />
            <param name="r_count" value="$(arg r_count)" />
            <param name="ns" value="$(arg r_ns)$(arg r_id)" />
            <param name="loop_rate" value="50" />
            <param name="retrans_own_topics" value="true" />
        </node>


        <node name="ohm_tsd_slam" pkg="ohm_tsd_slam" type="slam_node" output="screen">
            <param name="cur_robot_name" value="$(arg r_ns)$(arg r_id)" />
            <param name="robot_nbr" value="$(arg r_count)" />
            <param name="map_size" value="10.5" />
            <param name="x_offset" value="-$(arg this_x)" />
            <param name="y_offset" value="-$(arg this_y)" />
            <param name="cellsize" value="0.015" />
            <param name="low_reflectivity_range" value="3.5" />
            <param name="occ_grid_time_interval" value="2.0" />
            <param name="truncation_radius" value="3.5" />
            <param name="object_inflation_factor" value="1" />
            <param name="use_object_inflation" value="true" />
            <param name="reg_trs_max" value="0.5" />
            <param name="reg_sin_rot_max" value="0.5" />
            <param name="laser_topic" value="scan_r$(arg r_id)" />
            <param name="tf_base_frame" value="map" />
            <param name="tf_child_frame" value="base_footprint" />
            <param name="pose_topic" value="pose" />
            <param name="registration_mode" value="0" />
            <param name="icp_iterations" value="50" />
            <param name="ransac_trials" value="20" />
            <param name="publish_only_cur_robot_tf" value="true" />
            <!--<param name="tf_odom_frame" value="odom" />
            <param name="tf_footrpint_frame" value="base_footprint" />
            <param name="use_odom_rescue" value="false" />-->

            <param name="robot_name_0" value="$(arg r_ns)0" />
            <param name="$(arg r_ns)0_offset_x" value="$(arg x0)" />
            <param name="$(arg r_ns)0_offset_y" value="$(arg y0)" />
            <param name="$(arg r_ns)0_offset_yaw" value="0.0" />
            <param name="$(arg r_ns)0_max_range" value="4" />
            <param name="$(arg r_ns)0_min_range" value="0.01" />

            <param name="robot_name_1" value="$(arg r_ns)1" />
            <param name="$(arg r_ns)1_offset_x" value="$(arg x1)" />
            <param name="$(arg r_ns)1_offset_y" value="$(arg y1)" />
            <param name="$(arg r_ns)1_offset_yaw" value="0.0" />
            <param name="$(arg r_ns)1_max_range" value="4" />
            <param name="$(arg r_ns)1_min_range" value="0.01" />

            <param name="robot_name_2" value="$(arg r_ns)2" />
            <param name="$(arg r_ns)2_offset_x" value="$(arg x2)" />
            <param name="$(arg r_ns)2_offset_y" value="$(arg y2)" />
            <param name="$(arg r_ns)2_offset_yaw" value="0.0" />
            <param name="$(arg r_ns)2_max_range" value="4" />
            <param name="$(arg r_ns)2_min_range" value="0.01" />
        </node>

    </group>
</launch>
